// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id             String       @id @default(cuid()) // UUID type in TS
  name           String
  email          String?      @unique
  locale         String?
  defaultThemeId String?
  plan           Plan
  status         Status
  createdAt      DateTime     @default(now())
  places         Place[]
  themes         Theme[]
  defaultTheme   Theme?       @relation("MerchantDefaultTheme", fields: [defaultThemeId], references: [id])
  campaigns      Campaign[]
  shortlinks     Shortlink[]
  slug           String       @default(cuid())
  logo           String?
  metadata       String?
  members        Member[]
  invitations    Invitation[]

  @@unique([slug])
  @@map("Merchant")
}

model Place {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  localName  String
  slug       String // required

  address         String?
  themeId         String?
  theme           Theme?   @relation(fields: [themeId], references: [id], onDelete: SetNull)
  landingDefaults Json?
  googlePlaceId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  campaigns Campaign[]

  // ‚Üê as you asked
  @@unique([merchantId, slug], map: "place_merchant_slug_unique")
  @@index([merchantId])
}

model Theme {
  id                    String     @id @default(cuid())
  merchantId            String
  merchant              Merchant   @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  name                  String
  logoUrl               String?
  brandColor            String?
  accentColor           String?
  textColor             String?
  meta                  Json?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  merchantsUsingDefault Merchant[] @relation("MerchantDefaultTheme")
  Place                 Place[]
}

model Campaign {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  placeId    String
  place      Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  name String
  slug String? // optional

  primaryCtaUrl String
  theme         Json?
  status        CampaignStatus @default(draft)
  startAt       DateTime?
  endAt         DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // multiple NULLs are allowed
  @@unique([placeId, slug], map: "campaign_place_slug_unique")
  @@index([merchantId])
  @@index([placeId])
}

model Shortlink {
  id         String    @id @default(cuid())
  code       String    @unique
  merchantId String
  merchant   Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  target     Json
  channel    String?
  themeId    String?
  active     Boolean   @default(true)
  expiresAt  DateTime?
  utm        Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

/// Enums matching your TS literal types

enum Plan {
  free
  pro
  enterprise
}

enum Status {
  active
  suspended
}

enum CampaignStatus {
  draft
  active
  archived
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  globalRole    String    @default("USER") // e.g. 'USER' | 'SUPER_ADMIN'
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  members     Member[]
  invitations Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Member {
  id             String   @id
  organizationId String
  merchant       Merchant @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String   @id
  organizationId String
  merchant       Merchant @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
