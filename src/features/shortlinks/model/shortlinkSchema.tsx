import { z } from "zod";

const shortlinkCodeSchema = z.string().min(1).regex(/^[a-zA-Z0-9_-]+$/, "Must be URL-safe");

const shortlinkTargetSchema = z.union([
  z.object({ t: z.literal("campaign"), cid: z.string(), pid: z.string() }),
  z.object({ t: z.literal("place"), pid: z.string() }),
]);

const shortlinkCommonSchema = z.object({
  merchantId: z.string().min(1),
  target: shortlinkTargetSchema,
  channel: z
    .enum(["qr", "nfc", "email", "web", "print", "custom"])
    .optional(),
  themeId: z.string().optional(),
  active: z.boolean(),
  expiresAt: z.string().datetime().optional(),
  utm: z
    .object({
      source: z.string().optional(),
      medium: z.string().optional(),
      campaign: z.string().optional(),
      term: z.string().optional(),
      content: z.string().optional(),
    })
    .optional(),
});

/**
 * Base schema representing the persisted shortlink shape.
 */
export const shortlinkBaseSchema = shortlinkCommonSchema.extend({
  code: shortlinkCodeSchema,
});

/**
 * Create schema — code is generated by the API so it is optional.
 */
export const shortlinkCreateSchema = shortlinkCommonSchema.extend({});

/**
 * Update schema — payload is partial but code remains required (path param).
 */
export const shortlinkUpdateSchema = shortlinkCommonSchema.partial().extend({
  code: shortlinkCodeSchema,
});

/**
 * Query schema — used for GET /admin/shortlinks filtering
 */
export const shortlinkQuerySchema = z.object({
  merchantId: z.string().optional(),
  target: z.enum(["campaign", "place", "url"]).optional(),
  pid: z.string().optional(),
  cid: z.string().optional(),
  channel: z
    .enum(["qr", "nfc", "email", "web", "print", "custom"])
    .optional(),
  status: z.enum(["active", "inactive"]).optional(),
  redis: z.enum(["ok", "missing", "error"]).optional(),
  q: z.string().optional(),
  _page: z.coerce.number().min(1).optional(),
  _limit: z.coerce.number().min(1).max(100).optional(),
  _sort: z
    .enum(["code", "merchantId", "channel", "createdAt", "updatedAt"])
    .optional(),
  _order: z.enum(["asc", "desc"]).optional(),
});

export type ShortlinkCreateInput = z.infer<typeof shortlinkCreateSchema>;
export type ShortlinkUpdateInput = z.infer<typeof shortlinkUpdateSchema>;
export type ShortlinkQueryParams = z.infer<typeof shortlinkQuerySchema>;
