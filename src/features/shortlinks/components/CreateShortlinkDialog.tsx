"use client";

import * as React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";

import {
  shortlinkCreateSchema,
  type ShortlinkCreateInput,
} from "../model/shortlinkSchema";
import { ShortlinkFormFields } from "./ShortlinkFormFields";
import { useCreateShortlink } from "../hooks/useShortlinkCrud";

import { DialogForm } from "@/components/form/DialogForm";

/**
 * Props:
 * - open/onOpenChange: control the sheet/dialog visibility
 * - merchantId: lock the shortlink to a merchant (hidden input)
 * - merchantsLite: pass if you want a merchant selector
 * - initialTarget: optionally prefill target (e.g. from Campaign/Place context)
 */
type Props = {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  merchantId?: string;
  merchantsLite?: Array<{ id: string; name: string }>;
  initialTarget?: ShortlinkCreateInput["target"];
};

export function CreateShortlinkDialog({
  open,
  onOpenChange,
  merchantId,
  merchantsLite = [],
  initialTarget,
}: Props) {
  const methods = useForm<ShortlinkCreateInput>({
    resolver: zodResolver(shortlinkCreateSchema),
    defaultValues: {
      merchantId: merchantId ?? "",
      // Default to campaign target unless specified by parent
      target:
        initialTarget ??
        ({ t: "campaign", cid: "", pid: "" } as ShortlinkCreateInput["target"]),
      channel: undefined,
      themeId: undefined,
      active: true,
      expiresAt: undefined,
      utm: {
        source: "",
        medium: "",
        campaign: "",
        term: "",
        content: "",
      },
    },
    mode: "onChange",
  });

  const { mutateAsync: createShortlink, isPending } = useCreateShortlink();

    
  
  const onSubmit = async (values: ShortlinkCreateInput) => {
    const utm =
      values.utm && Object.values(values.utm).some(Boolean) ? values.utm : undefined;

    await createShortlink({
      ...values,
      // Normalize optionals to undefined if needed
      channel: values.channel ?? undefined,
      themeId: values.themeId ?? undefined,
      expiresAt: values.expiresAt ?? undefined,
      utm,
    });

    onOpenChange(false);
  };
  
  type MethodsWithSlot = typeof methods & { _slot?: React.ReactNode };
  (methods as MethodsWithSlot)._slot = (
    <ShortlinkFormFields
      mode="create"
      disabled={isPending}
      merchantId={merchantId}
      merchantsLite={merchantsLite}
    />
  );

  return (
    <DialogForm<ShortlinkCreateInput>
      open={open}
      onOpenChange={onOpenChange}
      title="Create Shortlink"
      description="Configure the target and options. The code will be generated by the API."
      methods={methods}
      onSubmit={onSubmit}
      isBusy={isPending}
      isReady
      submitLabel="Create"
    />
  );
}
