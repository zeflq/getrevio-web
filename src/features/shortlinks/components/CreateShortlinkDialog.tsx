"use client";

import * as React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";

import {
  shortlinkFormSchema,
  type ShortlinkFormValues,
  type ShortlinkCreateInput,
} from "../model/shortlinkSchema";
import { ShortlinkFormFields } from "./ShortlinkFormFields";
import { useCreateShortlink } from "../hooks/useShortlinkCrud";

import { DialogForm } from "@/components/form/DialogForm";
import type { LiteListe } from "@/types/lists";
import {
  buildCreateShortlinkPayload,
  createInitialShortlinkValues,
} from "../lib/transformers";

/**
 * Props:
 * - open/onOpenChange: control the sheet/dialog visibility
 * - merchantId: lock the shortlink to a merchant (hidden input)
 * - merchantsLite: pass if you want a merchant selector
 * - initialTarget: optionally prefill target (e.g. from Campaign/Place context)
 */
type Props = {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  merchantId?: string;
  merchantsLite?: LiteListe[];
  initialTarget?: ShortlinkCreateInput["target"];
  onSuccess?: () => void;
};

export function CreateShortlinkDialog({
  open,
  onOpenChange,
  merchantId,
  merchantsLite = [],
  initialTarget,
  onSuccess,
}: Props) {
  const defaultValues = React.useMemo(
    () => createInitialShortlinkValues(merchantId ?? "", initialTarget ?? null),
    [merchantId, initialTarget]
  );

  const methods = useForm<ShortlinkFormValues>({
    resolver: zodResolver(shortlinkFormSchema),
    defaultValues,
    mode: "onSubmit",
  });

  const { reset } = methods;

  const { execute, isExecuting } = useCreateShortlink<
    ShortlinkCreateInput,
    { id?: string }
  >({
    onSuccess: () => {
      reset(defaultValues);
      onSuccess?.();
      onOpenChange(false);
    },
  });

  React.useEffect(() => {
    if (open) {
      reset(defaultValues);
    }
  }, [open, defaultValues, reset]);

  const onSubmit = (values: ShortlinkFormValues) => {
    execute(buildCreateShortlinkPayload(values));
  };
  
  type MethodsWithSlot = typeof methods & { _slot?: React.ReactNode };
  (methods as MethodsWithSlot)._slot = (
    <ShortlinkFormFields
      mode="create"
      disabled={isExecuting}
      merchantId={merchantId}
      merchantsLite={merchantsLite}
    />
  );

  return (
    <DialogForm<ShortlinkFormValues>
      open={open}
      onOpenChange={(next) => {
        if (!next) reset(defaultValues);
        onOpenChange(next);
      }}
      title="Create Shortlink"
      description="Configure the target and options. The code will be generated by the API."
      methods={methods}
      onSubmit={onSubmit}
      isBusy={isExecuting}
      isReady
      submitLabel={isExecuting ? "Creating..." : "Create"}
    />
  );
}
